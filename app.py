import streamlit as st
import pandas as pd
import os
import json
from openai import OpenAI
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Page configuration
st.set_page_config(
    page_title="Buscador de C√≥digos NUN",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Initialize OpenAI client
@st.cache_resource
def init_openai_client():
    """Initialize OpenAI client with API key from environment variables"""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        st.error("‚ö†Ô∏è API Key de OpenAI no encontrada. Verifique la variable de entorno OPENAI_API_KEY")
        st.stop()
    return OpenAI(api_key=api_key)

# Load CSV data
@st.cache_data
def load_nun_data():
    """Load NUN procedures data from CSV file"""
    try:
        # Try to load the CSV file
        df = pd.read_csv('nun_procedimientos.csv')
        
        # Clean and standardize column names
        df.columns = df.columns.str.strip()
        
        # Handle currency formatting in fee columns
        fee_columns = ['Cirujano', 'Ayudantes', 'Total']
        for col in fee_columns:
            if col in df.columns:
                # Remove currency symbols and convert to numeric
                df[col] = df[col].astype(str).str.replace('$', '').str.replace(',', '').str.replace('"', '')
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        
        logger.info(f"Loaded {len(df)} procedures from CSV")
        return df
    except FileNotFoundError:
        st.error("‚ùå Archivo 'nun_procedimientos.csv' no encontrado")
        st.stop()
    except Exception as e:
        st.error(f"‚ùå Error al cargar el archivo CSV: {str(e)}")
        st.stop()

def create_search_prompt(user_description, procedures_data):
    """Create a prompt for OpenAI to find matching procedure codes"""
    
    # Get a sample of procedures for context
    sample_procedures = procedures_data.head(40)
    procedures_context = []
    
    for _, row in sample_procedures.iterrows():
        procedures_context.append({
            "codigo": row['C√≥digo'],
            "descripcion": row['Descripci√≥n'],
            "region": row.get('Regi√≥n', ''),
            "complejidad": row.get('Complejidad', ''),
            "palabras_clave": row.get('Palabras clave', '')
        })
        # Glosario m√©dico contextual para mejorar la interpretaci√≥n sem√°ntica
    glosario = """
Glosario anat√≥mico y sistema de codificaci√≥n del NUN (Nomenclador √önico Nacional):

El NUN organiza los procedimientos quir√∫rgicos por regi√≥n anat√≥mica, utilizando abreviaciones. Estas son las principales:

- MS ‚Üí Miembro Superior (clav√≠cula, h√∫mero, codo, antebrazo, mu√±eca, mano, dedos)
- CO ‚Üí Columna (cervical, dorsal, lumbar, sacra)
- PC ‚Üí Pelvis y Cadera (f√©mur proximal, acet√°bulo, sacro)
- RO ‚Üí Rodilla (patela, c√≥ndilos femorales, platillos tibiales, ligamentos cruzados)
- PP ‚Üí Pierna y Pie (tibia, peron√©, tobillo, astr√°galo, calc√°neo, metatarsianos, falanges)

Adem√°s, hay sin√≥nimos comunes que deben interpretarse correctamente:

- "Fractura de cadera" ‚Üí fractura de f√©mur proximal ‚Üí buscar en PC
- "Fractura de mu√±eca" ‚Üí radio distal ‚Üí buscar en MS
- "Fractura de hombro" ‚Üí h√∫mero proximal ‚Üí buscar en MS
- "Fractura de tobillo" ‚Üí maleolo ‚Üí buscar en PP
- "Fractura de pelvis" ‚Üí rama isquiopubiana, acet√°bulo ‚Üí buscar en PC
- "Fractura de espalda" ‚Üí columna cervica, dorsal o lumbar ‚Üí buscar en CO

EJEMPLO DE EQUIVALENCIA:
Entrada: "fractura de cadera"
Interpretaci√≥n esperada: "fractura de f√©mur proximal", regi√≥n PC
"""
    prompt = f"""
    {glosario}
Eres un asistente m√©dico especializado en traumatolog√≠a y ortopedia. Tu tarea es analizar una descripci√≥n libre del procedimiento quir√∫rgico e identificar correctamente:

1. La regi√≥n anat√≥mica afectada (seg√∫n el sistema NUN).
2. El tipo de fractura o lesi√≥n.
3. La t√©cnica quir√∫rgica mencionada.

Luego, seleccion√° los 3 a 5 c√≥digos NUN m√°s apropiados, tomando en cuenta:
- La regi√≥n codificada (MS, CO, PC, RO, PP).
- La descripci√≥n textual.
- La complejidad y t√©cnica si se menciona.

DESCRIPCI√ìN DEL PROCEDIMIENTO INGRESADA POR EL M√âDICO:
"{user_description}"

CONTEXTO DE C√ìDIGOS NUN DISPONIBLES (muestra):
{json.dumps(procedures_context, ensure_ascii=False, indent=2)}

INSTRUCCIONES:
1. Analiza la descripci√≥n del procedimiento m√©dico
2. Usa el glosario anterior para interpretar t√©rminos amplios como "cadera", "mu√±eca", "tobillo", etc. 
3. Identifica las palabras clave m√©dicas relevantes (anatom√≠a, t√©cnica quir√∫rgica, tipo de lesi√≥n, etc.)
4. Busca en tu conocimiento los c√≥digos NUN que mejor coincidan con la descripci√≥n
5. Considera la regi√≥n anat√≥mica, complejidad y tipo de procedimiento
6. Devuelve EXACTAMENTE 3 a 6 c√≥digos m√°s probables, ordenados por relevancia

FORMATO DE RESPUESTA (JSON obligatorio):
{{
    "codigos_sugeridos": [
        {{
            "codigo": "MS.01.01",
            "motivo": "Explicaci√≥n breve de por qu√© este c√≥digo es relevante",
            "confianza": 0.95
        }}
    ]
}}

IMPORTANTE:
- Solo sugiere c√≥digos que existan en el nomenclador NUN
- La confianza debe ser un n√∫mero entre 0 y 1
- Ordena por relevancia (m√°s relevante primero)
- Responde SOLO en formato JSON
- Si no encuentras coincidencias claras, sugiere los c√≥digos m√°s cercanos
"""
    
    return prompt

def query_openai_for_codes(client, user_description, procedures_data):
    """Query OpenAI to get suggested procedure codes"""
    try:
        prompt = create_search_prompt(user_description, procedures_data)
        
        # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
        # do not change this unless explicitly requested by the user
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "Sos un experto en codificaci√≥n quir√∫rgica. Siempre us√° el glosario proporcionado para traducir t√©rminos generales como 'cadera', 'mu√±eca' o 'hombro' en t√©rminos anat√≥micos precisos del Nomenclador √önico Nacional. Responde siempre en JSON v√°lido."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            response_format={"type": "json_object"},
            temperature=0.3,
            max_tokens=1500
        )
        
        result = json.loads(response.choices[0].message.content)
        return result.get("codigos_sugeridos", [])
        
    except json.JSONDecodeError as e:
        logger.error(f"Error parsing JSON response: {e}")
        return []
    except Exception as e:
        logger.error(f"Error querying OpenAI: {e}")
        return []

def display_results(suggested_codes, procedures_data):
    """Display the search results in a formatted way"""
    if not suggested_codes:
        st.warning("‚ö†Ô∏è No se encontraron c√≥digos sugeridos. Intente con una descripci√≥n m√°s espec√≠fica.")
        return
    
    st.subheader("üìã C√≥digos NUN Sugeridos")
    
    for i, suggestion in enumerate(suggested_codes, 1):
        codigo = suggestion.get("codigo", "")
        motivo = suggestion.get("motivo", "")
        confianza = suggestion.get("confianza", 0)
        
        # Find the procedure in our data
        procedure_row = procedures_data[procedures_data['C√≥digo'] == codigo]
        
        if not procedure_row.empty:
            row = procedure_row.iloc[0]
            
            # Create an expander for each result
            with st.expander(f"üîç **{i}. {codigo}** - Confianza: {confianza:.0%}", expanded=(i <= 2)):
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.markdown(f"**üìÑ Descripci√≥n:**")
                    st.write(row['Descripci√≥n'])
                    
                    st.markdown(f"**üéØ Motivo de sugerencia:**")
                    st.write(motivo)
                    
                    if 'Regi√≥n' in row:
                        st.markdown(f"**üó∫Ô∏è Regi√≥n:** {row['Regi√≥n']}")
                    if 'Complejidad' in row:
                        st.markdown(f"**‚öôÔ∏è Complejidad:** {row['Complejidad']}")
                
                with col2:
                    st.markdown("**üí∞ Honorarios**")
                    
                    cirujano = row.get('Cirujano', 0)
                    ayudantes = row.get('Ayudantes', 0)
                    total = row.get('Total', 0)
                    
                    if cirujano > 0:
                        st.metric("üë®‚Äç‚öïÔ∏è Cirujano", f"${cirujano:,.0f}")
                    if ayudantes > 0:
                        st.metric("ü§ù Ayudantes", f"${ayudantes:,.0f}")
                    if total > 0:
                        st.metric("üíé Total", f"${total:,.0f}")
                
                # Add separator
                if i < len(suggested_codes):
                    st.divider()
        else:
            st.error(f"‚ùå C√≥digo {codigo} no encontrado en la base de datos")

def main():
    """Main application function"""
    # Initialize
    client = init_openai_client()
    procedures_data = load_nun_data()
    
    # Header
    st.title("üè• Buscador de C√≥digos NUN")
    st.markdown("**Sistema de b√∫squeda inteligente para c√≥digos del Nomenclador √önico Nacional**")
    st.markdown("*Especialmente dise√±ado para traumatolog√≠a y ortopedia*")
    
    st.divider()
    
    # Input section
    st.subheader("üîç Descripci√≥n del Procedimiento")
    st.markdown("Ingrese una descripci√≥n libre del procedimiento quir√∫rgico:")
    
    # Text area for procedure description
    user_input = st.text_area(
        "Descripci√≥n del procedimiento:",
        placeholder="Ejemplo: fractura desplazada de c√∫bito y radio con reducci√≥n y osteos√≠ntesis con placa",
        height=120,
        help="Describa el procedimiento quir√∫rgico con el mayor detalle posible incluyendo anatom√≠a, tipo de lesi√≥n y t√©cnica quir√∫rgica"
    )
    
    # Search button
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        search_button = st.button("üîç Buscar C√≥digos NUN", type="primary", use_container_width=True)
    
    # Process search
    if search_button:
        if not user_input.strip():
            st.warning("‚ö†Ô∏è Por favor ingrese una descripci√≥n del procedimiento")
            return
        
        with st.spinner("ü§ñ Analizando descripci√≥n y buscando c√≥digos relevantes..."):
            suggested_codes = query_openai_for_codes(client, user_input, procedures_data)
            
        if suggested_codes:
            display_results(suggested_codes, procedures_data)
        else:
            st.error("‚ùå Error al procesar la b√∫squeda. Verifique su conexi√≥n a internet y la configuraci√≥n de la API.")
    
    # Footer
    st.divider()
    st.markdown("""
    <div style='text-align: center; color: #666; font-size: 0.8em;'>
    üí° Sistema de b√∫squeda inteligente de c√≥digos NUN | Desarrollado para profesionales de la traumatolog√≠a
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()

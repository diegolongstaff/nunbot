import streamlit as st
import pandas as pd
import os
import json
from openai import OpenAI
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration variables
USE_GPT4O = True  # Set to False to use GPT-3.5 for both region detection and code search

# Page configuration
st.set_page_config(
    page_title="Buscador de C√≥digos NUN",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Mobile-friendly viewport
st.markdown('<meta name="viewport" content="width=device-width, initial-scale=1">', unsafe_allow_html=True)

# Initialize OpenAI client
@st.cache_resource
def init_openai_client():
    """Initialize OpenAI client with API key from environment variables"""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        st.error("‚ö†Ô∏è API Key de OpenAI no encontrada. Verifique la variable de entorno OPENAI_API_KEY")
        st.stop()
    return OpenAI(api_key=api_key)

# Load CSV data
@st.cache_data
def load_nun_data():
    """Load NUN procedures data from CSV file"""
    try:
        # Try to load the CSV file
        df = pd.read_csv('nun_procedimientos.csv')
        
        # Clean and standardize column names
        df.columns = df.columns.str.strip()
        
        # Handle currency formatting in fee columns
        fee_columns = ['Cirujano', 'Ayudantes', 'Total']
        for col in fee_columns:
            if col in df.columns:
                # Remove currency symbols and convert to numeric
                df[col] = df[col].astype(str).str.replace('$', '').str.replace(',', '').str.replace('"', '')
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        
        logger.info(f"Loaded {len(df)} procedures from CSV")
        return df
    except FileNotFoundError:
        st.error("‚ùå Archivo 'nun_procedimientos.csv' no encontrado")
        st.stop()
    except Exception as e:
        st.error(f"‚ùå Error al cargar el archivo CSV: {str(e)}")
        st.stop()

# Initialize session state for search history
def init_session_state():
    """Initialize session state variables"""
    if "historial" not in st.session_state:
        st.session_state["historial"] = []

@st.cache_data
def determine_anatomical_region(user_description, use_gpt4o=True):
    """Step 1: Determine the anatomical region from the medical description"""
    prompt = f"""
Eres un asistente m√©dico especializado en traumatolog√≠a y ortopedia. Tu tarea es determinar la regi√≥n anat√≥mica bas√°ndote en la descripci√≥n del procedimiento.

DESCRIPCI√ìN DEL PROCEDIMIENTO:
"{user_description}"

GLOSARIO M√âDICO CONTEXTUAL - REGIONES ANAT√ìMICAS:
- **MS** ‚Üí Miembro Superior (hombro, h√∫mero, codo, antebrazo, mu√±eca, mano, dedos)
- **CO** ‚Üí Columna (cervical, dorsal, lumbar, sacra, vertebras)
- **PC** ‚Üí Pelvis y Cadera (f√©mur proximal, acet√°bulo, sacro, cadera)
- **RO** ‚Üí Rodilla (patela, c√≥ndilos femorales, platillos tibiales, ligamentos cruzados)
- **PP** ‚Üí Pierna y Pie (tibia, peron√©, tobillo, calc√°neo, astr√°galo, metatarsianos, falanges)

EJEMPLOS DE INTERPRETACI√ìN:
- "fractura de cadera" ‚Üí regi√≥n PC
- "fractura de mu√±eca" ‚Üí regi√≥n MS
- "fractura de tobillo" ‚Üí regi√≥n PP
- "fractura de columna" ‚Üí regi√≥n CO
- "fractura de rodilla" ‚Üí regi√≥n RO
- "forage de cadera" ‚Üí regi√≥n PC

INSTRUCCIONES:
1. Analiza la descripci√≥n del procedimiento
2. Identifica la regi√≥n anat√≥mica m√°s apropiada
3. Responde SOLO con el c√≥digo de la regi√≥n en formato JSON

FORMATO DE RESPUESTA (JSON obligatorio):
{{
    "region": "PC",
    "confianza": 0.95,
    "motivo": "Explicaci√≥n breve de por qu√© esta regi√≥n es correcta"
}}

IMPORTANTE:
- Responde SOLO en formato JSON
- La regi√≥n debe ser exactamente: MS, CO, PC, RO, o PP
- La confianza debe ser un n√∫mero entre 0 y 1
"""
    
    try:
        # Get client
        client = init_openai_client()
        
        # Choose model based on configuration
        model = "gpt-4o" if use_gpt4o else "gpt-3.5-turbo"
        
        response = client.chat.completions.create(
            model=model,
            messages=[
                {
                    "role": "system",
                    "content": "Eres un experto en anatom√≠a traumatol√≥gica. Responde siempre en formato JSON v√°lido."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            response_format={"type": "json_object"},
            temperature=0.2,
            max_tokens=500
        )
        
        result = json.loads(response.choices[0].message.content)
        return result.get("region", ""), result.get("confianza", 0), result.get("motivo", "")
        
    except Exception as e:
        logger.error(f"Error determining anatomical region: {e}")
        return "", 0, ""

def create_search_prompt(user_description, filtered_procedures):
    """Step 2: Create a prompt for OpenAI to find matching procedure codes from filtered region"""
    
    # Convert filtered procedures to compact text format
    procedures_list = []
    for _, row in filtered_procedures.iterrows():
        codigo = row['C√≥digo']
        descripcion = row['Descripci√≥n']
        # Create compact format: CODE - DESCRIPTION
        procedures_list.append(f"{codigo} - {descripcion}")
    
    # Join all procedures into a single string
    procedures_text = "\n".join(procedures_list)
    
    prompt = f"""
Eres un asistente m√©dico especializado en traumatolog√≠a y ortopedia. Tu tarea es encontrar los c√≥digos NUN m√°s apropiados para el procedimiento descrito.

DESCRIPCI√ìN DEL PROCEDIMIENTO:
"{user_description}"

LISTA DE PROCEDIMIENTOS POSIBLES:
{procedures_text}

INSTRUCCIONES:
1. Analiza la descripci√≥n del procedimiento m√©dico
2. Busca coincidencias EXACTAS en las descripciones primero
3. Identifica palabras clave m√©dicas relevantes (anatom√≠a, t√©cnica quir√∫rgica, tipo de lesi√≥n, etc.)
4. Considera la complejidad y tipo de procedimiento
5. Devuelve EXACTAMENTE 3-5 c√≥digos m√°s probables, ordenados por relevancia y confianza

FORMATO DE RESPUESTA (JSON obligatorio):
{{
    "codigos_sugeridos": [
        {{
            "codigo": "PC.05.07",
            "motivo": "Explicaci√≥n breve de por qu√© este c√≥digo es relevante",
            "confianza": 0.95
        }}
    ]
}}

IMPORTANTE:
- Solo sugiere c√≥digos que existan en la lista proporcionada
- Busca coincidencias EXACTAS en las descripciones antes que aproximadas
- La confianza debe ser un n√∫mero entre 0 y 1
- Ordena por relevancia (m√°s relevante primero)
- Responde SOLO en formato JSON
- Para "forage de cadera" busca espec√≠ficamente c√≥digos que contengan "forage" y "cadera"
"""
    
    return prompt

@st.cache_data
def cached_query_openai_for_codes(user_description, procedures_text, use_gpt4o=True):
    """Cached function to query OpenAI for procedure codes"""
    try:
        # Get client
        client = init_openai_client()
        
        # Choose model based on configuration
        model = "gpt-3.5-turbo"  # Always use GPT-3.5 for code search as it's sufficient
        
        prompt = f"""
Eres un asistente m√©dico especializado en traumatolog√≠a y ortopedia. Tu tarea es encontrar los c√≥digos NUN m√°s apropiados para el procedimiento descrito.

DESCRIPCI√ìN DEL PROCEDIMIENTO:
"{user_description}"

LISTA DE PROCEDIMIENTOS POSIBLES:
{procedures_text}

INSTRUCCIONES:
1. Analiza la descripci√≥n del procedimiento m√©dico
2. Busca coincidencias EXACTAS en las descripciones primero
3. Identifica palabras clave m√©dicas relevantes (anatom√≠a, t√©cnica quir√∫rgica, tipo de lesi√≥n, etc.)
4. Considera la complejidad y tipo de procedimiento
5. Devuelve EXACTAMENTE 3-5 c√≥digos m√°s probables, ordenados por relevancia y confianza

FORMATO DE RESPUESTA (JSON obligatorio):
{{
    "codigos_sugeridos": [
        {{
            "codigo": "PC.05.07",
            "motivo": "Explicaci√≥n breve de por qu√© este c√≥digo es relevante",
            "confianza": 0.95
        }}
    ]
}}

IMPORTANTE:
- Solo sugiere c√≥digos que existan en la lista proporcionada
- Busca coincidencias EXACTAS en las descripciones antes que aproximadas
- La confianza debe ser un n√∫mero entre 0 y 1
- Ordena por relevancia (m√°s relevante primero)
- Responde SOLO en formato JSON
- Para "forage de cadera" busca espec√≠ficamente c√≥digos que contengan "forage" y "cadera"
"""
        
        response = client.chat.completions.create(
            model=model,
            messages=[
                {
                    "role": "system",
                    "content": "Eres un experto en c√≥digos NUN para traumatolog√≠a. Responde siempre en formato JSON v√°lido."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            response_format={"type": "json_object"},
            temperature=0.3,
            max_tokens=1500
        )
        
        result = json.loads(response.choices[0].message.content)
        return result.get("codigos_sugeridos", [])
        
    except json.JSONDecodeError as e:
        logger.error(f"Error parsing JSON response: {e}")
        return []
    except Exception as e:
        logger.error(f"Error querying OpenAI: {e}")
        return []

def query_openai_for_codes(user_description, procedures_data):
    """Two-step process: 1) Determine region, 2) Search filtered codes"""
    
    # Step 1: Determine anatomical region (cached)
    with st.spinner("üîç Identificando regi√≥n anat√≥mica..."):
        region, confidence, reason = determine_anatomical_region(user_description, USE_GPT4O)
        
        if not region:
            st.error("‚ùå No se pudo determinar la regi√≥n anat√≥mica")
            return []
        
        # Show region identification result
        st.info(f"üéØ **Regi√≥n identificada:** {region} (Confianza: {confidence:.0%})")
        st.write(f"**Motivo:** {reason}")
    
    # Step 2: Filter procedures by region
    filtered_procedures = procedures_data[procedures_data['Regi√≥n'] == region]
    
    if filtered_procedures.empty:
        st.warning(f"‚ö†Ô∏è No se encontraron procedimientos para la regi√≥n {region}")
        return []
    
    st.info(f"üîé Buscando entre {len(filtered_procedures)} procedimientos de la regi√≥n {region}...")
    
    # Step 3: Search within filtered procedures (cached)
    # Log token optimization
    logger.info(f"Token optimization: Searching within {len(filtered_procedures)} procedures instead of full dataset ({len(procedures_data)} procedures)")
    
    # Convert filtered procedures to compact text format for caching
    procedures_list = []
    for _, row in filtered_procedures.iterrows():
        codigo = row['C√≥digo']
        descripcion = row['Descripci√≥n']
        procedures_list.append(f"{codigo} - {descripcion}")
    procedures_text = "\n".join(procedures_list)
    
    # üëá Debug: Imprimir input y cantidad de c√≥digos
    print("üü¢ User description:")
    print(user_description)
    print("üî¢ C√≥digos NUN que se mandan:")
    print(len(filtered_procedures))
    
    # Use cached function for OpenAI query
    suggested_codes = cached_query_openai_for_codes(user_description, procedures_text, USE_GPT4O)
    
    return suggested_codes, region

def display_results(suggested_codes, procedures_data):
    """Display the search results in a formatted way"""
    if not suggested_codes:
        st.warning("‚ö†Ô∏è No se encontraron c√≥digos sugeridos. Intente con una descripci√≥n m√°s espec√≠fica.")
        return
    
    st.subheader("üìã C√≥digos NUN Sugeridos")
    
    for i, suggestion in enumerate(suggested_codes, 1):
        codigo = suggestion.get("codigo", "")
        motivo = suggestion.get("motivo", "")
        confianza = suggestion.get("confianza", 0)
        
        # Find the procedure in our data
        procedure_row = procedures_data[procedures_data['C√≥digo'] == codigo]
        
        if not procedure_row.empty:
            row = procedure_row.iloc[0]
            
            # Create an expander for each result - mobile friendly
            with st.expander(f"üîç **{i}. {codigo}** - Confianza: {confianza:.0%}", expanded=(i <= 2)):
                # Mobile-friendly layout - stack vertically on small screens
                st.markdown(f"**üìÑ Descripci√≥n:**")
                st.write(row['Descripci√≥n'])
                
                st.markdown(f"**üéØ Motivo de sugerencia:**")
                st.write(motivo)
                
                if 'Regi√≥n' in row:
                    st.markdown(f"**üó∫Ô∏è Regi√≥n:** {row['Regi√≥n']}")
                if 'Complejidad' in row:
                    st.markdown(f"**‚öôÔ∏è Complejidad:** {row['Complejidad']}")
                
                # Honorarios section
                st.markdown("**üí∞ Honorarios**")
                
                cirujano = row.get('Cirujano', 0)
                ayudantes = row.get('Ayudantes', 0)
                total = row.get('Total', 0)
                
                # Mobile-friendly metrics in columns only if needed
                if cirujano > 0 or ayudantes > 0 or total > 0:
                    col1, col2, col3 = st.columns(3)
                    if cirujano > 0:
                        col1.metric("üë®‚Äç‚öïÔ∏è Cirujano", f"${cirujano:,.0f}")
                    if ayudantes > 0:
                        col2.metric("ü§ù Ayudantes", f"${ayudantes:,.0f}")
                    if total > 0:
                        col3.metric("üíé Total", f"${total:,.0f}")
                
                # Add separator
                if i < len(suggested_codes):
                    st.divider()
        else:
            st.error(f"‚ùå C√≥digo {codigo} no encontrado en la base de datos")

def add_to_history(user_description, region, suggested_codes):
    """Add search to session history"""
    if "historial" not in st.session_state:
        st.session_state["historial"] = []
    
    # Create history entry
    history_entry = {
        "timestamp": datetime.now().strftime("%d/%m/%Y %H:%M"),
        "descripcion": user_description,
        "region": region,
        "codigos": suggested_codes[:3]  # Store only top 3 codes
    }
    
    # Add to beginning of history (most recent first)
    st.session_state["historial"].insert(0, history_entry)
    
    # Keep only last 10 searches
    if len(st.session_state["historial"]) > 10:
        st.session_state["historial"] = st.session_state["historial"][:10]

def display_search_history():
    """Display search history in expandable section"""
    if "historial" not in st.session_state or not st.session_state["historial"]:
        return
    
    st.divider()
    
    with st.expander(f"üìö Historial de B√∫squedas ({len(st.session_state['historial'])})", expanded=False):
        for i, entry in enumerate(st.session_state["historial"]):
            with st.container():
                st.markdown(f"**üïê {entry['timestamp']}**")
                st.markdown(f"**Descripci√≥n:** {entry['descripcion']}")
                st.markdown(f"**Regi√≥n:** {entry['region']}")
                
                if entry['codigos']:
                    st.markdown("**C√≥digos encontrados:**")
                    for j, codigo_info in enumerate(entry['codigos'], 1):
                        codigo = codigo_info.get('codigo', '')
                        confianza = codigo_info.get('confianza', 0)
                        st.write(f"  {j}. {codigo} (Confianza: {confianza:.0%})")
                
                if i < len(st.session_state["historial"]) - 1:
                    st.divider()

def main():
    """Main application function"""
    # Initialize session state
    init_session_state()
    
    # Load data
    procedures_data = load_nun_data()
    
    # Configuration info in sidebar (optional)
    with st.sidebar:
        st.markdown("### ‚öôÔ∏è Configuraci√≥n")
        current_model = "GPT-4o" if USE_GPT4O else "GPT-3.5 Turbo"
        st.info(f"**Modelo para regi√≥n:** {current_model}")
        st.info(f"**Modelo para c√≥digos:** GPT-3.5 Turbo")
        
        if st.button("üóëÔ∏è Limpiar Historial"):
            st.session_state["historial"] = []
            st.rerun()
    
    # Header
    st.title("üè• Buscador de C√≥digos NUN")
    st.markdown("**Sistema de b√∫squeda inteligente para c√≥digos del Nomenclador √önico Nacional**")
    st.markdown("*Especialmente dise√±ado para traumatolog√≠a y ortopedia*")
    
    st.divider()
    
    # Input section
    st.subheader("üîç Descripci√≥n del Procedimiento")
    st.markdown("Ingrese una descripci√≥n libre del procedimiento quir√∫rgico:")
    
    # Text area for procedure description - mobile friendly
    user_input = st.text_area(
        "Descripci√≥n del procedimiento:",
        placeholder="Ejemplo: fractura desplazada de c√∫bito y radio con reducci√≥n y osteos√≠ntesis con placa",
        height=120,
        help="Describa el procedimiento quir√∫rgico con el mayor detalle posible incluyendo anatom√≠a, tipo de lesi√≥n y t√©cnica quir√∫rgica"
    )
    
    # Search button - mobile friendly, full width
    search_button = st.button("üîç Buscar C√≥digos NUN", type="primary", use_container_width=True)
    
    # Process search
    if search_button:
        if not user_input.strip():
            st.warning("‚ö†Ô∏è Por favor ingrese una descripci√≥n del procedimiento")
            return
        
        with st.spinner("ü§ñ Analizando descripci√≥n y buscando c√≥digos relevantes..."):
            result = query_openai_for_codes(user_input, procedures_data)
            
            if result and len(result) == 2:
                suggested_codes, region = result
                
                if suggested_codes:
                    display_results(suggested_codes, procedures_data)
                    # Add to history
                    add_to_history(user_input, region, suggested_codes)
                else:
                    st.error("‚ùå Error al procesar la b√∫squeda. Verifique su conexi√≥n a internet y la configuraci√≥n de la API.")
            else:
                st.error("‚ùå Error al procesar la b√∫squeda. Verifique su conexi√≥n a internet y la configuraci√≥n de la API.")
    
    # Display search history
    display_search_history()
    
    # Footer
    st.divider()
    st.markdown("""
    <div style='text-align: center; color: #666; font-size: 0.8em;'>
    üí° Sistema de b√∫squeda inteligente de c√≥digos NUN | Desarrollado para profesionales de la traumatolog√≠a
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
